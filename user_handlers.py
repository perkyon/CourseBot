# user_handlers.py

import os
import re
import sqlite3

from aiogram import Router, F
from aiogram import types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
)
from yookassa import Payment, Configuration

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º ID –∞–¥–º–∏–Ω–∞ –∏–∑ config.py, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –µ–º—É –¥–∞–Ω–Ω—ã–µ
from config import (
    ADMIN_ID,   # –Ω—É–∂–Ω–æ –ø—Ä–æ–ø–∏—Å–∞—Ç—å –≤ config.py
    VERONIKA_ID,
    TAX_SYSTEM_CODE,
    VAT_CODE
)

router = Router()

# ---------------------------------------------
# –°–æ—Å—Ç–æ—è–Ω–∏—è (FSM)
# ---------------------------------------------
class Registration(StatesGroup):
    name = State()
    email = State()
    phone = State()


# ---------------------------------------------
# –°–ª–æ–≤–∞—Ä–∏ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ —Ç–µ–∫—Å—Ç–∞–º–∏ –∫—É—Ä—Å–∞
# ---------------------------------------------

# –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–¥–ª—è —à–∞–≥–∞ ¬´–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å¬ª)
courses_short_info = {
    "course_1": "‚ú® –¢–≤–æ–π –∏–¥–µ–∞–ª—å–Ω—ã–π –º–∞–∫–∏—è–∂ –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å\n–ù–∞—É—á–∏—Å—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –ª—ë–≥–∫–∏–π, –Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–Ω—ã–π –æ–±—Ä–∞–∑! –û—Å–≤–æ–∏—à—å –±–∞–∑–æ–≤—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏, –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∫–æ–∂–∏, –∫–æ—Ä—Ä–µ–∫—Ü–∏—é –∏ –º–∞–∫–∏—è–∂ –≥–ª–∞–∑ –∏ –≥—É–±. –í–∫–ª—é—á–∞–µ—Ç —á–µ–∫-–ª–∏—Å—Ç —Å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–π –∫–æ—Å–º–µ—Ç–∏–∫–æ–π.",
    "course_2": "üìã –ß–µ–∫-–ª–∏—Å—Ç ¬´–ù–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ä–µ–¥—Å—Ç–≤¬ª\n–°—ç–∫–æ–Ω–æ–º—å –≤—Ä–µ–º—è –∏ –¥–µ–Ω—å–≥–∏ ‚Äì –ø–æ–ª—É—á–∏ —Å–ø–∏—Å–æ–∫ –ª—É—á—à–∏—Ö –±—é–¥–∂–µ—Ç–Ω—ã—Ö –∏ –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∏–º–µ–Ω–Ω–æ —Ç–µ–±–µ.",
    "course_3": "üåü OFFLINE COURSE ¬´–ú–ê–ö–ò–Ø–ñ –î–õ–Ø –°–ï–ë–Ø¬ª\n–ü–æ–ª–Ω–æ–µ –ø–æ–≥—Ä—É–∂–µ–Ω–∏–µ –≤ –º–∞–∫–∏—è–∂ —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º –ø–æ–¥—Ö–æ–¥–æ–º. –†–∞–∑–±–µ—Ä—ë–º –∫–æ—Å–º–µ—Ç–∏—á–∫—É, –æ—Å–≤–æ–∏–º —Å—Ç–æ–π–∫—É—é –∫–æ—Ä—Ä–µ–∫—Ü–∏—é –∏ —Å–æ–∑–¥–∞–¥–∏–º –∏–¥–µ–∞–ª—å–Ω—ã–π –≤–µ—á–µ—Ä–Ω–∏–π –æ–±—Ä–∞–∑. –ö–æ—Å–º–µ—Ç–∏–∫–∞ –∏ –∫–∏—Å—Ç–∏ –≤–∫–ª—é—á–µ–Ω—ã!"
}

# –ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–¥–ª—è –ø–æ–∫–∞–∑–∞ –≤ show_course_details)
courses_full_info = {
    "course_1": (
        "‚ú® –¢–≤–æ–π –∏–¥–µ–∞–ª—å–Ω—ã–π –º–∞–∫–∏—è–∂ –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å\n\n"
        "–≠—Ç–æ—Ç –∫—É—Ä—Å –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –æ—Å–≤–æ–∏—Ç—å –±–∞–∑–æ–≤—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –º–∞–∫–∏—è–∂–∞ –∏ –Ω–∞—É—á–∏—Ç—å—Å—è —Å–æ–∑–¥–∞–≤–∞—Ç—å –ª—ë–≥–∫–∏–π, –Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–Ω—ã–π –æ–±—Ä–∞–∑.\n\n"
        "üìå –ß—Ç–æ —Ç–µ–±—è –∂–¥—ë—Ç?\n"
        "üîπ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–∂–∏ ‚Äì –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ—á–∏—â–µ–Ω–∏–µ –∏ —É–≤–ª–∞–∂–Ω–µ–Ω–∏–µ\n"
        "üîπ –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –ª–∏—Ü–∞ ‚Äì –∫—Ä–µ–º–æ–≤—ã–µ vs. —Å—É—Ö–∏–µ —Ç–µ–∫—Å—Ç—É—Ä—ã\n"
        "üîπ –ú–∞–∫–∏—è–∂ –≥–ª–∞–∑ –∏ –≥—É–± ‚Äì –ø–æ–¥–±–∏—Ä–∞–µ–º –æ—Ç—Ç–µ–Ω–∫–∏, –æ—Å–≤–∞–∏–≤–∞–µ–º —Ç–µ—Ö–Ω–∏–∫–∏ –¥–ª—è –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ–≥–æ, –Ω–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ–±—Ä–∞–∑–∞\n\n"
        "üí° –ë–æ–Ω—É—Å ‚Äì —á–µ–∫-–ª–∏—Å—Ç —Å –ª—É—á—à–∏–º–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏!\n\n"
        "–ü–æ—Å–ª–µ –∫—É—Ä—Å–∞ —Ç—ã —Å–º–æ–∂–µ—à—å –¥–µ–ª–∞—Ç—å —Å—Ç–æ–π–∫–∏–π –º–∞–∫–∏—è–∂ –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Ç—Ä–∞—Ç –∏ –æ—à–∏–±–æ–∫. üíÑ‚ú®\n\n"
        "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 1490 ‚ÇΩ"
    ),
    "course_2": (
        "üìã –ß–µ–∫-–ª–∏—Å—Ç ¬´–ù–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ä–µ–¥—Å—Ç–≤¬ª\n\n"
        "–ù–µ —Ç—Ä–∞—Ç—å –¥–µ–Ω—å–≥–∏ –Ω–∞ –±–µ—Å–ø–æ–ª–µ–∑–Ω—É—é –∫–æ—Å–º–µ—Ç–∏–∫—É! –≠—Ç–æ—Ç —á–µ–∫-–ª–∏—Å—Ç –ø–æ–º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å –ª—É—á—à–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏–º–µ–Ω–Ω–æ –¥–ª—è —Ç–µ–±—è.\n\n"
        "üìå –ß—Ç–æ –≤–Ω—É—Ç—Ä–∏?\n"
        "‚úî –ë—é–¥–∂–µ—Ç–Ω—ã–µ –∏ –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞—é—Ç\n"
        "‚úî –°—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–∂–∏\n"
        "‚úî –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —è –∏—Å–ø–æ–ª—å–∑—É—é —Å–∞–º–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –∫–ª–∏–µ–Ω—Ç–∞–º\n\n"
        "–¢—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—à—å —Ä–∞–∑–æ—á–∞—Ä–æ–≤—ã–≤–∞—Ç—å—Å—è –≤ –ø–æ–∫—É–ø–∫–µ –∫–æ—Å–º–µ—Ç–∏–∫–∏ ‚Äì —Å—Ä–∞–∑—É –≤—ã–±–µ—Ä–µ—à—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã!\n\n"
        "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 990 ‚ÇΩ"
    ),
    "course_3": (
        "üåü OFFLINE COURSE ¬´–ú–ê–ö–ò–Ø–ñ –î–õ–Ø –°–ï–ë–Ø¬ª\n\n"
        "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ: —Ä–∞–∑–±–µ—Ä—ë—à—å—Å—è –≤ –∫–æ—Å–º–µ—Ç–∏–∫–µ, –Ω–∞—É—á–∏—à—å—Å—è –ø–æ–¥–±–∏—Ä–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –º–∞–∫–∏—è–∂ –±–µ–∑ –≤–∏–∑–∞–∂–∏—Å—Ç–∞.\n\n"
        "üìå –§–æ—Ä–º–∞—Ç\n"
        "‚úî 2 –¥–Ω—è –ø–æ 2 —á–∞—Å–∞ (—Ç–µ–æ—Ä–∏—è + –ø—Ä–∞–∫—Ç–∏–∫–∞)\n"
        "‚úî –ö–æ—Å–º–µ—Ç–∏–∫–∞ –∏ –∫–∏—Å—Ç–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è\n"
        "‚úî –ì–∏–±–∫–∏–π –≥—Ä–∞—Ñ–∏–∫\n\n"
        "üíÑ –î–µ–Ω—å 1 ‚Äì –ë–∞–∑–∞ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –º–∞–∫–∏—è–∂–∞\n"
        "üîπ –†–∞–∑–±–æ—Ä –∫–æ—Å–º–µ—Ç–∏—á–∫–∏\n"
        "üîπ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –±—Ä–µ–Ω–¥—ã\n"
        "üîπ –ü–æ–¥–±–æ—Ä –ø–æ —Ç–∏–ø—É –∫–æ–∂–∏\n"
        "üîπ –î–Ω–µ–≤–Ω–æ–π –º–∞–∫–∏—è–∂\n\n"
        "‚ú® –î–µ–Ω—å 2 ‚Äì –°–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É–µ–º –Ω–∞–≤—ã–∫\n"
        "üîπ –í–µ—á–µ—Ä–Ω–∏–π –º–∞–∫–∏—è–∂\n"
        "üîπ –¢–û–ü-5 –∫–∏—Å—Ç–µ–π\n"
        "üîπ –°—Ç–æ–π–∫–∞—è –∫—Ä–µ–º–æ–≤–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è\n"
        "üîπ Wish-list –∫–æ—Å–º–µ—Ç–∏–∫–∏ –ø–æ–¥ —Ç–≤–æ–π –±—é–¥–∂–µ—Ç\n\n"
        "–ü–æ—Å–ª–µ –∫—É—Ä—Å–∞ —Ç—ã —Å–º–æ–∂–µ—à—å –¥–µ–ª–∞—Ç—å –ø—Ä–æ—Ñ. –º–∞–∫–∏—è–∂ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ! üíÑ‚ú®\n\n"
        "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 13000 ‚ÇΩ"
    )
}

# –¶–µ–Ω—ã –∏ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –∫–æ–¥–∞ (Payment)
courses_data = {
    "course_1": {"title": "‚ú® –¢–≤–æ–π –∏–¥–µ–∞–ª—å–Ω—ã–π –º–∞–∫–∏—è–∂", "price": 1490},
    "course_2": {"title": "üìã –ß–µ–∫-–ª–∏—Å—Ç –∫–æ—Å–º–µ—Ç–∏–∫–∏", "price": 990},
    "course_3": {"title": "üåü –û—Ñ—Ñ–ª–∞–π–Ω-–∫—É—Ä—Å", "price": 13000}
}

# ---------------------------------------------
# –•–µ–Ω–¥–ª–µ—Ä /start
# ---------------------------------------------
@router.message(Command("start"))
async def cmd_start(message: types.Message):
    video_file = "img/privetsvie.mp4"
    if os.path.exists(video_file):
        await message.answer_video(FSInputFile(video_file))

    text = (
        "–ü–µ—Ä–µ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏:\n\n"
        "1) –ú—ã —Å–æ–±–∏—Ä–∞–µ–º –≤–∞—à–µ –§–ò–û, Email, –¢–µ–ª–µ—Ñ–æ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —á–µ–∫–∞ (54‚Äë–§–ó).\n"
        "2) –î–∞–Ω–Ω—ã–µ –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º –∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–¥–∞—á–∏ —á–µ–∫–∞.\n"
        "3) –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö.\n"
        "4) –ü–æ–ª–Ω–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏... (–∏ —Ç.–¥.)"
    )

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å —É—Å–ª–æ–≤–∏—è", callback_data="accept_terms")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data="decline_terms")]
    ])
    await message.answer(text, reply_markup=kb)

# ---------------------------------------------
# –û—Ç–∫–∞–∑ –∏ –ø—Ä–∏–Ω—è—Ç–∏–µ —É—Å–ª–æ–≤–∏–π
# ---------------------------------------------
@router.callback_query(F.data == "decline_terms")
async def decline_terms(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer("‚ùå –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —É—Å–ª–æ–≤–∏–π. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await callback.answer()

@router.callback_query(F.data == "accept_terms")
async def accept_terms(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()

    # –ó–∞–¥–∞—ë–º –≤–æ–ø—Ä–æ—Å ¬´–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è¬ª
    sent_msg = await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º —É–¥–∞–ª–∏—Ç—å
    await state.update_data({"last_bot_msg_id": sent_msg.message_id})

    await state.set_state(Registration.name)
    await callback.answer()

# ---------------------------------------------
# FSM: –ò–º—è ‚Üí Email ‚Üí –¢–µ–ª–µ—Ñ–æ–Ω
# ---------------------------------------------
class Registration(StatesGroup):
    name = State()
    email = State()
    phone = State()

@router.message(Registration.name)
async def reg_name(message: types.Message, state: FSMContext):
    data = await state.get_data()

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å
    last_id = data.get("last_bot_msg_id")
    if last_id:
        try:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=last_id)
        except:
            pass

    # –£–¥–∞–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.delete()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è
    await state.update_data({"name": message.text})

    # –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    sent_msg = await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Email (–ø—Ä–∏–º–µ—Ä: name@example.com):")
    await state.update_data({"last_bot_msg_id": sent_msg.message_id})
    await state.set_state(Registration.email)

@router.message(Registration.email)
async def reg_email(message: types.Message, state: FSMContext):
    data = await state.get_data()

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å
    last_id = data.get("last_bot_msg_id")
    if last_id:
        try:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=last_id)
        except:
            pass

    # –£–¥–∞–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.delete()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º email
    email_pattern = re.compile(r"^[^@\s]+@[^@\s]+\.[^@\s]+$")
    if not email_pattern.match(message.text):
        sent_msg = await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Email. –ü—Ä–∏–º–µ—Ä: user@example.com. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")
        await state.update_data({"last_bot_msg_id": sent_msg.message_id})
        return

    await state.update_data({"email": message.text})

    # –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
    sent_msg = await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (+7XXXXXXXXXX):")
    await state.update_data({"last_bot_msg_id": sent_msg.message_id})
    await state.set_state(Registration.phone)

@router.message(Registration.phone)
async def reg_phone(message: types.Message, state: FSMContext):
    data = await state.get_data()

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å
    last_id = data.get("last_bot_msg_id")
    if last_id:
        try:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=last_id)
        except:
            pass

    # –£–¥–∞–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.delete()

    raw_phone = re.sub(r"\D", "", message.text)
    if raw_phone.startswith("8"):
        raw_phone = "7" + raw_phone[1:]
    if len(raw_phone) == 11 and raw_phone.startswith("7"):
        phone_number = "+" + raw_phone
    else:
        sent_msg = await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ +7XXXXXXXXXX. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:"
        )
        await state.update_data({"last_bot_msg_id": sent_msg.message_id})
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    name = data.get("name")
    email = data.get("email")
    conn = sqlite3.connect("users.db")
    conn.execute(
        "INSERT OR REPLACE INTO users (tg_id, name, email, phone) VALUES (?,?,?,?)",
        (message.from_user.id, name, email, phone_number)
    )
    conn.commit()
    conn.close()

    await state.clear()

    # === –û–¢–ü–†–ê–í–ö–ê –î–ê–ù–ù–´–• –ê–î–ú–ò–ù–£ ===
    # –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –≤—ã–≤–æ–¥–∏—Ç–µ –±–æ–ª—å—à–µ –ø–æ–ª–µ–π:
    admin_text = (
        f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n"
        f"–ò–º—è: {name}\n"
        f"Email: {email}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone_number}\n"
        f"tg_id: {message.from_user.id}"
    )
    await message.bot.send_message(ADMIN_ID, admin_text)

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –∫—É—Ä—Å
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –∫—É—Ä—Å", callback_data="select_course")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="accept_terms")]
    ])
    await message.answer(
        "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:",
        reply_markup=kb
    )

# ---------------------------------------------
# –í—ã–±–æ—Ä –∫—É—Ä—Å–∞: –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–Ω–æ–≤–æ–µ)
# ---------------------------------------------
@router.callback_query(F.data == "select_course")
async def select_course(callback: CallbackQuery):
    await callback.message.delete()

    text = (
        f"{courses_short_info['course_1']}\n\n"
        f"{courses_short_info['course_2']}\n\n"
        f"{courses_short_info['course_3']}\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π –∫—É—Ä—Å, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ."
    )

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("‚ú® –ò–¥–µ–∞–ª—å–Ω—ã–π –º–∞–∫–∏—è–∂", callback_data="course_1")],
        [InlineKeyboardButton("üìã –ß–µ–∫-–ª–∏—Å—Ç –∫–æ—Å–º–µ—Ç–∏–∫–∏", callback_data="course_2")],
        [InlineKeyboardButton("üåü –û—Ñ—Ñ–ª–∞–π–Ω-–∫—É—Ä—Å", callback_data="course_3")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="cancel_registration")]
    ])
    await callback.message.answer(text, reply_markup=kb)
    await callback.answer()


@router.callback_query(F.data == "cancel_registration")
async def cancel_registration(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥. –ú–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –Ω–∞–±—Ä–∞—Ç—å /start –∏–ª–∏ /admin.")
    await callback.answer()

# ---------------------------------------------
# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫—É—Ä—Å–∞
# ---------------------------------------------
@router.callback_query(F.data.in_(courses_full_info.keys()))
async def show_course_details(callback: CallbackQuery):
    await callback.message.delete()

    course_key = callback.data
    text = courses_full_info[course_key]

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å –∫—É—Ä—Å üí≥", callback_data=f"pay_{course_key}")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="select_course")]
    ])

    await callback.message.answer(text, reply_markup=kb)
    await callback.answer()

# ---------------------------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ ¬´–û–ø–ª–∞—Ç–∏—Ç—å –∫—É—Ä—Å¬ª
# ---------------------------------------------
@router.callback_query(lambda c: c.data.startswith("pay_"))
async def pay_course(callback: CallbackQuery):
    await callback.message.delete()

    course_key = callback.data.split("_", 1)[1]
    # –ë–µ—Ä—ë–º –¥–∞–Ω–Ω—ã–µ –∏–∑ courses_data (—Å –∫–æ—Ä–æ—Ç–∫–∏–º title –∏ —á–∏—Å–ª–æ–≤–æ–π price)
    course_info = courses_data[course_key]

    # –î–æ—Å—Ç–∞—ë–º email/—Ç–µ–ª–µ—Ñ–æ–Ω –∏–∑ –ë–î
    conn = sqlite3.connect("users.db")
    row = conn.execute(
        "SELECT email, phone FROM users WHERE tg_id=?",
        (callback.from_user.id,)
    ).fetchone()
    conn.close()

    user_email = "user@example.com"
    user_phone = "+70000000000"
    if row:
        user_email, user_phone = row

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º, –∫–∞–∫–æ–π –∫—É—Ä—Å –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)
    conn = sqlite3.connect("users.db")
    conn.execute(
        "UPDATE users SET course=? WHERE tg_id=?",
        (course_info["title"], callback.from_user.id)
    )
    conn.commit()
    conn.close()

    # –°–æ–∑–¥–∞—ë–º –ø–ª–∞—Ç—ë–∂
    payment_data = {
        "amount": {
            "value": str(course_info["price"]),
            "currency": "RUB"
        },
        "confirmation": {
            "type": "redirect",
            "return_url": "https://t.me/testcoursee_bot"
        },
        "capture": True,
        "description": course_info["title"],

        "receipt": {
            "items": [
                {
                    "description": course_info["title"],
                    "quantity": "1.00",
                    "amount": {
                        "value": str(course_info["price"]),
                        "currency": "RUB"
                    },
                    "vat_code": str(VAT_CODE),
                    "payment_subject": "service",      # —É—Å–ª—É–≥–∞
                    "payment_mode": "full_prepayment"  # –ø–æ–ª–Ω–∞—è –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞
                }
            ],
            "phone": user_phone,
            "email": user_email,
            "tax_system_code": TAX_SYSTEM_CODE
        }
    }

    payment = Payment.create(payment_data)

    # –ö–Ω–æ–ø–∫–∏ ¬´–û–ø–ª–∞—Ç–∏—Ç—å üí≥¬ª –∏ ¬´–ù–∞–∑–∞–¥¬ª
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="–û–ø–ª–∞—Ç–∏—Ç—å üí≥",
                url=payment.confirmation.confirmation_url
            ),
            InlineKeyboardButton(
                text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
                callback_data="select_course"
            )
        ]
    ])

    await callback.message.answer(
        "–û–ø–ª–∞—Ç–∏—Ç–µ –∫—É—Ä—Å –ø–æ —Å—Å—ã–ª–∫–µ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥:",
        reply_markup=kb
    )

    # –ï—Å–ª–∏ –æ—Ñ—Ñ–ª–∞–π–Ω-–∫—É—Ä—Å, —É–≤–µ–¥–æ–º–∏–º –í–µ—Ä–æ–Ω–∏–∫—É
    if course_key == "course_3":
        user_link = (f"@{callback.from_user.username}"
                     if callback.from_user.username
                     else callback.from_user.full_name)
        await callback.message.bot.send_message(
            VERONIKA_ID,
            f"–ù–æ–≤—ã–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –æ—Ñ—Ñ–ª–∞–π–Ω-–∫—É—Ä—Å–∞: {user_link}"
        )

    await callback.answer()

def register_user_handlers(dp):
    dp.include_router(router)
