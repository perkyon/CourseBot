# user_handlers.py
import os
import re
import sqlite3

from aiogram import Router, F
from aiogram import types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (FSInputFile, InlineKeyboardMarkup,
                           InlineKeyboardButton, CallbackQuery)

from yookassa import Configuration, Payment  # –ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Configuration –≥–¥–µ-—Ç–æ –≤ main.py

from config import VERONIKA_ID  # –±–µ—Ä–µ–º ID –∏–∑ config, –µ—Å–ª–∏ —Ö–æ—Ç–∏–º —É–≤–µ–¥–æ–º–ª—è—Ç—å –í–µ—Ä–æ–Ω–∏–∫—É

router = Router()

# ---------------------------------------------
# –°–æ—Å—Ç–æ—è–Ω–∏—è (FSM)
# ---------------------------------------------
class Registration(StatesGroup):
    name = State()
    email = State()
    phone = State()

# ---------------------------------------------
# –°–ª–æ–≤–∞—Ä—å –∫—É—Ä—Å–æ–≤
# ---------------------------------------------
courses = {
    "course_1": {"title": "‚ú® –ò–¥–µ–∞–ª—å–Ω—ã–π –º–∞–∫–∏—è–∂", "price": 1490, "chat": "https://t.me/+CKm_e2SAXndjNDBi"},
    "course_2": {"title": "üìã –ß–µ–∫-–ª–∏—Å—Ç –∫–æ—Å–º–µ—Ç–∏–∫–∏", "price": 990, "chat": "https://t.me/+8uSRRO1IucwzYjZi"},
    "course_3": {"title": "üåü –û—Ñ—Ñ–ª–∞–π–Ω-–∫—É—Ä—Å", "price": 13000}
}

# ---------------------------------------------
# –•–µ–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /start
# ---------------------------------------------
@router.message(Command("start"))
async def cmd_start(message: types.Message):
    video_file = "img/privetsvie.mp4"
    if os.path.exists(video_file):
        await message.answer_video(FSInputFile(video_file))

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å —É—Å–ª–æ–≤–∏—è", callback_data="accept_terms")],
        [InlineKeyboardButton(text="üìú –û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è", callback_data="view_terms")]
    ])
    await message.answer("–ü–µ—Ä–µ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏:", reply_markup=kb)

# ---------------------------------------------
# –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è Inline-–∫–Ω–æ–ø–æ–∫ ¬´–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è¬ª / ¬´–û—Ç–∫–∞–∑–∞—Ç—å—Å—è¬ª
# ---------------------------------------------
@router.callback_query(F.data == "view_terms")
async def terms(callback: CallbackQuery):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å —É—Å–ª–æ–≤–∏—è", callback_data="accept_terms")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data="decline_terms")]
    ])
    await callback.message.answer(
        "üìú –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏:\n–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º.",
        reply_markup=kb
    )
    await callback.answer()

@router.callback_query(F.data == "decline_terms")
async def decline_terms(callback: CallbackQuery):
    await callback.message.answer("‚ùå –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —É—Å–ª–æ–≤–∏–π. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await callback.answer()

# ---------------------------------------------
# ¬´–ü—Ä–∏–Ω—è—Ç—å —É—Å–ª–æ–≤–∏—è¬ª ‚Üí –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
# ---------------------------------------------
@router.callback_query(F.data == "accept_terms")
async def accept_terms(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Registration.name)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await callback.answer()

# ---------------------------------------------
# FSM: –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö (–∏–º—è, email, —Ç–µ–ª–µ—Ñ–æ–Ω)
# ---------------------------------------------
@router.message(Registration.name)
async def reg_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Registration.email)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")

@router.message(Registration.email)
async def reg_email(message: types.Message, state: FSMContext):
    if "@" not in message.text:
        await message.answer("‚ùå Email –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å @. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")
        return
    await state.update_data(email=message.text)
    await state.set_state(Registration.phone)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (+7XXXXXXXXXX):")

@router.message(Registration.phone)
async def reg_phone(message: types.Message, state: FSMContext):
    if not re.match(r"^\+7\d{10}$", message.text):
        await message.answer("‚ùå –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å +7 –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 11 —Ü–∏—Ñ—Ä. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")
        return

    data = await state.get_data()
    conn = sqlite3.connect("users.db")
    conn.execute(
        "INSERT OR REPLACE INTO users (tg_id, name, email, phone) VALUES (?,?,?,?)",
        (message.from_user.id, data['name'], data['email'], message.text)
    )
    conn.commit()
    conn.close()

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞)
    await state.clear()

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –∫—É—Ä—Å", callback_data="select_course")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="accept_terms")]
    ])
    await message.answer(
        f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"–ò–º—è: {data['name']}\n"
        f"Email: {data['email']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {message.text}",
        reply_markup=kb
    )

# ---------------------------------------------
# –í—ã–±–æ—Ä –∫—É—Ä—Å–∞
# ---------------------------------------------
@router.callback_query(F.data == "select_course")
async def select_course(callback: CallbackQuery):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=c["title"], callback_data=key)]
        for key, c in courses.items()
    ])
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:", reply_markup=kb)
    await callback.answer()

# ---------------------------------------------
# –°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É + –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è course
# ---------------------------------------------
@router.callback_query(F.data.in_(courses.keys()))
async def course_info(callback: CallbackQuery):
    course_key = callback.data
    course = courses[course_key]

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ "course" –≤ —Ç–∞–±–ª–∏—Ü–µ users
    conn = sqlite3.connect("users.db")
    conn.execute("UPDATE users SET course=? WHERE tg_id=?", (course["title"], callback.from_user.id))
    conn.commit()
    conn.close()
    
    # –î–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:
    print("DEBUG: Current Yookassa config:", Configuration.account_id, Configuration.secret_key)

    # –°–æ–∑–¥–∞—ë–º –ø–ª–∞—Ç—ë–∂ –≤ Yookassa
    payment = Payment.create({
        "amount": {"value": course["price"], "currency": "RUB"},
        "confirmation": {"type": "redirect", "return_url": "https://t.me/–í–ê–®_–ë–æ—Ç"},
        "capture": True,
        "description": course["title"]
    })

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å –∫—É—Ä—Å üí≥", url=payment.confirmation.confirmation_url)]
    ])

    await callback.message.answer(
        f"{course['title']} ‚Äì {course['price']}‚ÇΩ",
        reply_markup=kb
    )

    # –û—Ç–¥–µ–ª—å–Ω—ã–π —Å–ª—É—á–∞–π: –æ—Ñ—Ñ–ª–∞–π–Ω-–∫—É—Ä—Å ‚Üí —É–≤–µ–¥–æ–º–∏—Ç—å –í–µ—Ä–æ–Ω–∏–∫—É
    if course_key == "course_3":
        user_link = (f"@{callback.from_user.username}"
                     if callback.from_user.username
                     else callback.from_user.full_name)
        await callback.message.bot.send_message(
            VERONIKA_ID,
            f"–ù–æ–≤—ã–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –æ—Ñ—Ñ–ª–∞–π–Ω-–∫—É—Ä—Å–∞: {user_link}"
        )

    await callback.answer()

def register_user_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤."""
    dp.include_router(router)
